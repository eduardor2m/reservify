// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: reservation.sql

package bridge

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReservation = `-- name: CreateReservation :exec

INSERT INTO "reservation" (id, id_user, id_room, check_in, check_out, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateReservationParams struct {
	ID        uuid.UUID
	IDUser    uuid.UUID
	IDRoom    uuid.UUID
	CheckIn   string
	CheckOut  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) error {
	_, err := q.db.ExecContext(ctx, createReservation,
		arg.ID,
		arg.IDUser,
		arg.IDRoom,
		arg.CheckIn,
		arg.CheckOut,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteReservation = `-- name: DeleteReservation :exec

DELETE FROM "reservation" WHERE id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, id)
	return err
}

const getReservationByID = `-- name: GetReservationByID :one

SELECT id, id_user, id_room, check_in, check_out, created_at, updated_at FROM "reservation" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReservationByID(ctx context.Context, id uuid.UUID) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservationByID, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.IDUser,
		&i.IDRoom,
		&i.CheckIn,
		&i.CheckOut,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReservationByIDRoom = `-- name: GetReservationByIDRoom :many

SELECT id, id_user, id_room, check_in, check_out, created_at, updated_at FROM "reservation" WHERE id_room = $1 ORDER BY created_at DESC
`

func (q *Queries) GetReservationByIDRoom(ctx context.Context, idRoom uuid.UUID) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, getReservationByIDRoom, idRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.IDUser,
			&i.IDRoom,
			&i.CheckIn,
			&i.CheckOut,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservationByIDUser = `-- name: GetReservationByIDUser :many

SELECT id, id_user, id_room, check_in, check_out, created_at, updated_at FROM "reservation" WHERE id_user = $1 ORDER BY created_at DESC
`

func (q *Queries) GetReservationByIDUser(ctx context.Context, idUser uuid.UUID) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, getReservationByIDUser, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.IDUser,
			&i.IDRoom,
			&i.CheckIn,
			&i.CheckOut,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllReservations = `-- name: ListAllReservations :many

SELECT id, id_user, id_room, check_in, check_out, created_at, updated_at FROM "reservation" ORDER BY created_at DESC
`

func (q *Queries) ListAllReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, listAllReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.IDUser,
			&i.IDRoom,
			&i.CheckIn,
			&i.CheckOut,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: room.sql

package bridge

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :exec

INSERT INTO room (id, cod, number, vacancies, price, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateRoomParams struct {
	ID        uuid.UUID
	Cod       string
	Number    int32
	Vacancies int32
	Price     string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.ExecContext(ctx, createRoom,
		arg.ID,
		arg.Cod,
		arg.Number,
		arg.Vacancies,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findRoomById = `-- name: FindRoomById :one

SELECT id, cod, number, vacancies, price, created_at, updated_at FROM room WHERE id = $1
`

func (q *Queries) FindRoomById(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, findRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Cod,
		&i.Number,
		&i.Vacancies,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllRooms = `-- name: ListAllRooms :many

SELECT id, cod, number, vacancies, price, created_at, updated_at FROM room ORDER BY created_at DESC
`

func (q *Queries) ListAllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listAllRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Cod,
			&i.Number,
			&i.Vacancies,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
